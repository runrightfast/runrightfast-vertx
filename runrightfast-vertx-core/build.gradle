buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.6.1'
  }
}

apply plugin: 'com.google.protobuf'

protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3.1'
    }
    
    generatedFilesBaseDir = "$buildDir/generated/source/proto"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java',"$buildDir/generated/source/proto/main/java"]
        }
        resources {
            srcDirs = ['src/main/resources','src/main/proto']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java',"$buildDir/generated/source/proto/test/java"]
        }
        resources {
            srcDirs = ['src/test/resources','src/test/proto']
        }
    }
}

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

dependencies {
    // TODO: Add dependencies here
    //   but note that JUnit should have already been added in parent.gradle.
    //   By default, only the Maven Central Repository is specified in
    //   parent.gradle.
    //
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
}
