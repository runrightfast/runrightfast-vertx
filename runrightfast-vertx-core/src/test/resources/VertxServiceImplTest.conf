runrightfast {
    vertx-default {
        VertxOptions {
        }
    }
    vertx-with-metrics {
        VertxOptions {
            metricsOptions {
                enabled = true
                jmxEnabled = true
                eventbusHandlers = [
                   { address="/eventbus-address-1", matchType="EQUALS"}
                   { address="/eventbus-address-2/.", matchType="REGEX"}
                ]
                monitoredHttpServerURIs = [
                   { uri="/verticle/log-service", matchType="EQUALS"}
                   { uri="/verticle/log-service/.", matchType="REGEX"}
                   { uri="/verticle/log-service-1/.", matchType="REGEX"}
                ]
                monitoredHttpClientURIs = [
                   { uri="/verticle/log-service", matchType="EQUALS"}
                   { uri="/verticle/log-service-1", matchType="EQUALS"}
                   { uri="/verticle/log-service-2", matchType="EQUALS"}
                   { uri="/verticle/log-service/.", matchType="REGEX"}
                ]
            }
        }
    }
    vertx-custom {
        VertxOptions {
            eventLoopPoolSize = 20
            workerPoolSize = 30
            clustered = true
            clusterPingInterval = 10000000
        }
    }
}


# .eventLoopPoolSize = json.getInteger("eventLoopPoolSize", DEFAULT_EVENT_LOOP_POOL_SIZE);
# .workerPoolSize = json.getInteger("workerPoolSize", DEFAULT_WORKER_POOL_SIZE);
# .clustered = json.getBoolean("clustered", DEFAULT_CLUSTERED);
# .clusterHost = json.getString("clusterHost", DEFAULT_CLUSTER_HOST);
# .clusterPort = json.getInteger("clusterPort", DEFAULT_CLUSTER_PORT);
# .clusterPingInterval = json.getLong("clusterPingInterval", DEFAULT_CLUSTER_PING_INTERVAL);
# .clusterPingReplyInterval = json.getLong("clusterPingReplyInterval", DEFAULT_CLUSTER_PING_REPLY_INTERVAL);
# .internalBlockingPoolSize = json.getInteger("internalBlockingPoolSize", DEFAULT_INTERNAL_BLOCKING_POOL_SIZE);
# .blockedThreadCheckInterval = json.getLong("blockedThreadCheckInterval", DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL);
# .maxEventLoopExecuteTime = json.getLong("maxEventLoopExecuteTime", DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME);
# .maxWorkerExecuteTime = json.getLong("maxWorkerExecuteTime", DEFAULT_MAX_WORKER_EXECUTE_TIME);
# .haEnabled = json.getBoolean("haEnabled", false);
# .quorumSize = json.getInteger("quorumSize", DEFAULT_QUORUM_SIZE);
# .haGroup = json.getString("haGroup", DEFAULT_HA_GROUP);
# JsonObject metricsJson = json.getJsonObject("metricsOptions");
# .metrics = metricsJson != null ? new MetricsOptions(metricsJson) : null;
# .warningExceptionTime = json.getLong("warningExceptionTime", DEFAULT_WARNING_EXECPTION_TIME);