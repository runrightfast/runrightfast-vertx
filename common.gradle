//
////
// This file is to be applied to every subproject.
//

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.5.0.RELEASE"
    }
}

apply plugin: "io.spring.dependency-management"

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'findbugs'

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
 }
 
findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true    
}

test {
    forkEvery 1    
}

String mavenGroupId = 'co.runrightfast'
String mavenVersion = '1.0-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral();
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencyManagement {
     dependencies {
        dependency group: 'com.google.guava', name: 'guava', version: '18.0'
        dependency group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
        dependency group: 'org.apache.commons', name: 'commons-collections4', version : '4.0'
        dependency group: 'org.apache.commons', name: 'commons-compress', version: '1.9'
        dependency group: 'commons-io', name:"commons-io", version:'2.4'
        dependency group: 'com.typesafe', name:'config', version:'1.3.0'
        dependency group: 'com.google.protobuf', name:'protobuf-java', version:'3.0.0-alpha-2'
        dependency group: 'org.glassfish', name:'javax.json', version:'1.0.4'
        
        dependency group:'org.elasticsearch', name:'elasticsearch', version:'1.5.2'
                
        dependencySet(group:'com.hazelcast', version: '3.5') {
            entry 'hazelcast-client'
            entry 'hazelcast'
        }
          
        dependencySet(group:'com.codahale.metrics', version: '3.0.2') {
            entry 'metrics-core'
            entry 'metrics-jvm'
            entry 'metrics-healthchecks'
        }
        
        dependencySet(group:'com.fasterxml.jackson.core', version: '2.5.3') {
            entry 'jackson-databind'
            entry 'jackson-core'
            entry 'jackson-annotations'
        }      
        
        dependencySet(group:'com.google.dagger', version: '2.0.1') {
            entry 'dagger'
            entry 'dagger-compiler'
        }
        
        dependencySet(group:'org.apache.kafka', version: '0.8.2.1') {
            entry 'kafka-clients'
            entry 'kafka_2.11'
        }
        
        dependencySet(group:'com.orientechnologies', version: '2.1-rc3') {
            entry 'orientdb-core'
            entry 'orientdb-client'
            entry 'orientdb-enterprise'            
            entry 'orientdb-graphdb'            
            entry 'orientdb-object'
            entry 'orientdb-distributed'
            entry 'orientdb-jdbc'
            entry 'orientdb-etl'
            entry 'orientdb-tools'
            entry 'orientdb-lucene'
        }
        
        dependencySet(group:'com.tinkerpop.blueprints', version: '2.6.0') {
            entry 'blueprints-core'            
        }
        
        dependencySet(group:'com.tinkerpop.blueprints', version: '2.4.0') {
            entry 'blueprints-orient-graph'            
        }
        
        imports {
            mavenBom 'org.apache.logging.log4j:log4j-bom:2.2'
        }
        
        dependency 'com.lmax:disruptor:3.3.2'
        
        dependency 'io.reactivex:rxjava:1.0.12'
        
        dependencySet(group:'io.vertx', version: '3.0.0') {
            entry 'vertx-core'
            entry 'vertx-hazelcast'
            entry 'vertx-web'
            entry 'vertx-dropwizard-metrics'
            entry 'vertx-service-factory'
            entry 'vertx-service-proxy'
            entry 'vertx-maven-service-factory'
            entry 'vertx-http-service-factory'
            entry 'vertx-auth-common'
            entry 'vertx-auth-shiro'
            entry 'vertx-auth-jwt'
            entry 'vertx-rx-java'
            entry 'vertx-unit'
            entry 'vertx-mail-service'
            entry 'vertx-mail-client'
        }
        
        dependency group: 'org.hibernate', name:'hibernate-validator', version:'5.1.3.Final'
        dependency group: 'javax.el', name:'javax.el-api', version:'2.2.5'
        dependency group: 'org.glassfish.web', name:'javax.el', version:'2.2.6'
        
        dependency 'junit:junit:4.12'
        dependency 'org.hamcrest:hamcrest-all:1.3'
        dependency 'org.mockito:mockito-core:1.10.19'
     }
}

dependencies {
    compile 'com.google.guava:guava'
    
    compile 'org.apache.commons:commons-lang3'
    compile 'org.apache.commons:commons-collections4'
    compile 'commons-io:commons-io'
    
    compile 'com.typesafe:config'
    
    compile 'com.google.dagger:dagger'
    compile 'com.google.dagger:dagger-compiler'
    
    compile 'com.codahale.metrics:metrics-core'
    compile 'com.codahale.metrics:metrics-healthchecks'
    
    compile 'org.glassfish:javax.json'
    
    compile 'io.reactivex:rxjava'
    
    compile 'io.vertx:vertx-core'
    compile 'io.vertx:vertx-rx-java'
    compile 'io.vertx:vertx-dropwizard-metrics'
    compile 'io.vertx:vertx-service-factory'
        
    // Adding dependencies here will add the dependencies to each subproject.
    testCompile 'junit:junit'
    testCompile 'org.hamcrest:hamcrest-all'
    testCompile 'org.mockito:mockito-core'
    testCompile 'io.vertx:vertx-unit'
}

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}

build.dependsOn javadoc, jacocoTestReport